module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.5). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBoard {
  count: Int!
}

type AggregateCard {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateList {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateTeamMembership {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Board {
  id: ID!
  owner: User!
  name: String!
  description: String
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  lists(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [List!]
  visibility: Visibility!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BoardConnection {
  pageInfo: PageInfo!
  edges: [BoardEdge]!
  aggregate: AggregateBoard!
}

input BoardCreateInput {
  id: ID
  owner: UserCreateOneWithoutBoardsInput!
  name: String!
  description: String
  members: UserCreateManyWithoutInvitedInput
  lists: ListCreateManyWithoutBoardInput
  visibility: Visibility
}

input BoardCreateManyInput {
  create: [BoardCreateInput!]
  connect: [BoardWhereUniqueInput!]
}

input BoardCreateManyWithoutMembersInput {
  create: [BoardCreateWithoutMembersInput!]
  connect: [BoardWhereUniqueInput!]
}

input BoardCreateManyWithoutOwnerInput {
  create: [BoardCreateWithoutOwnerInput!]
  connect: [BoardWhereUniqueInput!]
}

input BoardCreateOneWithoutListsInput {
  create: BoardCreateWithoutListsInput
  connect: BoardWhereUniqueInput
}

input BoardCreateWithoutListsInput {
  id: ID
  owner: UserCreateOneWithoutBoardsInput!
  name: String!
  description: String
  members: UserCreateManyWithoutInvitedInput
  visibility: Visibility
}

input BoardCreateWithoutMembersInput {
  id: ID
  owner: UserCreateOneWithoutBoardsInput!
  name: String!
  description: String
  lists: ListCreateManyWithoutBoardInput
  visibility: Visibility
}

input BoardCreateWithoutOwnerInput {
  id: ID
  name: String!
  description: String
  members: UserCreateManyWithoutInvitedInput
  lists: ListCreateManyWithoutBoardInput
  visibility: Visibility
}

type BoardEdge {
  node: Board!
  cursor: String!
}

enum BoardOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  visibility_ASC
  visibility_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BoardPreviousValues {
  id: ID!
  name: String!
  description: String
  visibility: Visibility!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BoardScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  visibility: Visibility
  visibility_not: Visibility
  visibility_in: [Visibility!]
  visibility_not_in: [Visibility!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BoardScalarWhereInput!]
  OR: [BoardScalarWhereInput!]
  NOT: [BoardScalarWhereInput!]
}

type BoardSubscriptionPayload {
  mutation: MutationType!
  node: Board
  updatedFields: [String!]
  previousValues: BoardPreviousValues
}

input BoardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BoardWhereInput
  AND: [BoardSubscriptionWhereInput!]
  OR: [BoardSubscriptionWhereInput!]
  NOT: [BoardSubscriptionWhereInput!]
}

input BoardUpdateDataInput {
  owner: UserUpdateOneRequiredWithoutBoardsInput
  name: String
  description: String
  members: UserUpdateManyWithoutInvitedInput
  lists: ListUpdateManyWithoutBoardInput
  visibility: Visibility
}

input BoardUpdateInput {
  owner: UserUpdateOneRequiredWithoutBoardsInput
  name: String
  description: String
  members: UserUpdateManyWithoutInvitedInput
  lists: ListUpdateManyWithoutBoardInput
  visibility: Visibility
}

input BoardUpdateManyDataInput {
  name: String
  description: String
  visibility: Visibility
}

input BoardUpdateManyInput {
  create: [BoardCreateInput!]
  update: [BoardUpdateWithWhereUniqueNestedInput!]
  upsert: [BoardUpsertWithWhereUniqueNestedInput!]
  delete: [BoardWhereUniqueInput!]
  connect: [BoardWhereUniqueInput!]
  set: [BoardWhereUniqueInput!]
  disconnect: [BoardWhereUniqueInput!]
  deleteMany: [BoardScalarWhereInput!]
  updateMany: [BoardUpdateManyWithWhereNestedInput!]
}

input BoardUpdateManyMutationInput {
  name: String
  description: String
  visibility: Visibility
}

input BoardUpdateManyWithoutMembersInput {
  create: [BoardCreateWithoutMembersInput!]
  delete: [BoardWhereUniqueInput!]
  connect: [BoardWhereUniqueInput!]
  set: [BoardWhereUniqueInput!]
  disconnect: [BoardWhereUniqueInput!]
  update: [BoardUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [BoardUpsertWithWhereUniqueWithoutMembersInput!]
  deleteMany: [BoardScalarWhereInput!]
  updateMany: [BoardUpdateManyWithWhereNestedInput!]
}

input BoardUpdateManyWithoutOwnerInput {
  create: [BoardCreateWithoutOwnerInput!]
  delete: [BoardWhereUniqueInput!]
  connect: [BoardWhereUniqueInput!]
  set: [BoardWhereUniqueInput!]
  disconnect: [BoardWhereUniqueInput!]
  update: [BoardUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [BoardUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [BoardScalarWhereInput!]
  updateMany: [BoardUpdateManyWithWhereNestedInput!]
}

input BoardUpdateManyWithWhereNestedInput {
  where: BoardScalarWhereInput!
  data: BoardUpdateManyDataInput!
}

input BoardUpdateOneRequiredWithoutListsInput {
  create: BoardCreateWithoutListsInput
  update: BoardUpdateWithoutListsDataInput
  upsert: BoardUpsertWithoutListsInput
  connect: BoardWhereUniqueInput
}

input BoardUpdateWithoutListsDataInput {
  owner: UserUpdateOneRequiredWithoutBoardsInput
  name: String
  description: String
  members: UserUpdateManyWithoutInvitedInput
  visibility: Visibility
}

input BoardUpdateWithoutMembersDataInput {
  owner: UserUpdateOneRequiredWithoutBoardsInput
  name: String
  description: String
  lists: ListUpdateManyWithoutBoardInput
  visibility: Visibility
}

input BoardUpdateWithoutOwnerDataInput {
  name: String
  description: String
  members: UserUpdateManyWithoutInvitedInput
  lists: ListUpdateManyWithoutBoardInput
  visibility: Visibility
}

input BoardUpdateWithWhereUniqueNestedInput {
  where: BoardWhereUniqueInput!
  data: BoardUpdateDataInput!
}

input BoardUpdateWithWhereUniqueWithoutMembersInput {
  where: BoardWhereUniqueInput!
  data: BoardUpdateWithoutMembersDataInput!
}

input BoardUpdateWithWhereUniqueWithoutOwnerInput {
  where: BoardWhereUniqueInput!
  data: BoardUpdateWithoutOwnerDataInput!
}

input BoardUpsertWithoutListsInput {
  update: BoardUpdateWithoutListsDataInput!
  create: BoardCreateWithoutListsInput!
}

input BoardUpsertWithWhereUniqueNestedInput {
  where: BoardWhereUniqueInput!
  update: BoardUpdateDataInput!
  create: BoardCreateInput!
}

input BoardUpsertWithWhereUniqueWithoutMembersInput {
  where: BoardWhereUniqueInput!
  update: BoardUpdateWithoutMembersDataInput!
  create: BoardCreateWithoutMembersInput!
}

input BoardUpsertWithWhereUniqueWithoutOwnerInput {
  where: BoardWhereUniqueInput!
  update: BoardUpdateWithoutOwnerDataInput!
  create: BoardCreateWithoutOwnerInput!
}

input BoardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  owner: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  lists_every: ListWhereInput
  lists_some: ListWhereInput
  lists_none: ListWhereInput
  visibility: Visibility
  visibility_not: Visibility
  visibility_in: [Visibility!]
  visibility_not_in: [Visibility!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BoardWhereInput!]
  OR: [BoardWhereInput!]
  NOT: [BoardWhereInput!]
}

input BoardWhereUniqueInput {
  id: ID
}

type Card {
  id: ID!
  list: List!
  createdBy: User!
  title: String!
  description: String
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  index: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CardConnection {
  pageInfo: PageInfo!
  edges: [CardEdge]!
  aggregate: AggregateCard!
}

input CardCreateInput {
  id: ID
  list: ListCreateOneWithoutCardsInput!
  createdBy: UserCreateOneInput!
  title: String!
  description: String
  comments: CommentCreateManyWithoutCardInput
  index: Int!
}

input CardCreateManyWithoutListInput {
  create: [CardCreateWithoutListInput!]
  connect: [CardWhereUniqueInput!]
}

input CardCreateOneWithoutCommentsInput {
  create: CardCreateWithoutCommentsInput
  connect: CardWhereUniqueInput
}

input CardCreateWithoutCommentsInput {
  id: ID
  list: ListCreateOneWithoutCardsInput!
  createdBy: UserCreateOneInput!
  title: String!
  description: String
  index: Int!
}

input CardCreateWithoutListInput {
  id: ID
  createdBy: UserCreateOneInput!
  title: String!
  description: String
  comments: CommentCreateManyWithoutCardInput
  index: Int!
}

type CardEdge {
  node: Card!
  cursor: String!
}

enum CardOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  index_ASC
  index_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CardPreviousValues {
  id: ID!
  title: String!
  description: String
  index: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CardScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  index: Int
  index_not: Int
  index_in: [Int!]
  index_not_in: [Int!]
  index_lt: Int
  index_lte: Int
  index_gt: Int
  index_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CardScalarWhereInput!]
  OR: [CardScalarWhereInput!]
  NOT: [CardScalarWhereInput!]
}

type CardSubscriptionPayload {
  mutation: MutationType!
  node: Card
  updatedFields: [String!]
  previousValues: CardPreviousValues
}

input CardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CardWhereInput
  AND: [CardSubscriptionWhereInput!]
  OR: [CardSubscriptionWhereInput!]
  NOT: [CardSubscriptionWhereInput!]
}

input CardUpdateInput {
  list: ListUpdateOneRequiredWithoutCardsInput
  createdBy: UserUpdateOneRequiredInput
  title: String
  description: String
  comments: CommentUpdateManyWithoutCardInput
  index: Int
}

input CardUpdateManyDataInput {
  title: String
  description: String
  index: Int
}

input CardUpdateManyMutationInput {
  title: String
  description: String
  index: Int
}

input CardUpdateManyWithoutListInput {
  create: [CardCreateWithoutListInput!]
  delete: [CardWhereUniqueInput!]
  connect: [CardWhereUniqueInput!]
  set: [CardWhereUniqueInput!]
  disconnect: [CardWhereUniqueInput!]
  update: [CardUpdateWithWhereUniqueWithoutListInput!]
  upsert: [CardUpsertWithWhereUniqueWithoutListInput!]
  deleteMany: [CardScalarWhereInput!]
  updateMany: [CardUpdateManyWithWhereNestedInput!]
}

input CardUpdateManyWithWhereNestedInput {
  where: CardScalarWhereInput!
  data: CardUpdateManyDataInput!
}

input CardUpdateOneRequiredWithoutCommentsInput {
  create: CardCreateWithoutCommentsInput
  update: CardUpdateWithoutCommentsDataInput
  upsert: CardUpsertWithoutCommentsInput
  connect: CardWhereUniqueInput
}

input CardUpdateWithoutCommentsDataInput {
  list: ListUpdateOneRequiredWithoutCardsInput
  createdBy: UserUpdateOneRequiredInput
  title: String
  description: String
  index: Int
}

input CardUpdateWithoutListDataInput {
  createdBy: UserUpdateOneRequiredInput
  title: String
  description: String
  comments: CommentUpdateManyWithoutCardInput
  index: Int
}

input CardUpdateWithWhereUniqueWithoutListInput {
  where: CardWhereUniqueInput!
  data: CardUpdateWithoutListDataInput!
}

input CardUpsertWithoutCommentsInput {
  update: CardUpdateWithoutCommentsDataInput!
  create: CardCreateWithoutCommentsInput!
}

input CardUpsertWithWhereUniqueWithoutListInput {
  where: CardWhereUniqueInput!
  update: CardUpdateWithoutListDataInput!
  create: CardCreateWithoutListInput!
}

input CardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  list: ListWhereInput
  createdBy: UserWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  index: Int
  index_not: Int
  index_in: [Int!]
  index_not_in: [Int!]
  index_lt: Int
  index_lte: Int
  index_gt: Int
  index_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CardWhereInput!]
  OR: [CardWhereInput!]
  NOT: [CardWhereInput!]
}

input CardWhereUniqueInput {
  id: ID
}

type Comment {
  id: ID!
  card: Card!
  postedBy: User!
  content: String!
  replies(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  stickied: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  card: CardCreateOneWithoutCommentsInput!
  postedBy: UserCreateOneWithoutCommentsInput!
  content: String!
  replies: CommentCreateManyInput
  stickied: Boolean
}

input CommentCreateManyInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutCardInput {
  create: [CommentCreateWithoutCardInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutPostedByInput {
  create: [CommentCreateWithoutPostedByInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutCardInput {
  id: ID
  postedBy: UserCreateOneWithoutCommentsInput!
  content: String!
  replies: CommentCreateManyInput
  stickied: Boolean
}

input CommentCreateWithoutPostedByInput {
  id: ID
  card: CardCreateOneWithoutCommentsInput!
  content: String!
  replies: CommentCreateManyInput
  stickied: Boolean
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  stickied_ASC
  stickied_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentPreviousValues {
  id: ID!
  content: String!
  stickied: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  stickied: Boolean
  stickied_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateDataInput {
  card: CardUpdateOneRequiredWithoutCommentsInput
  postedBy: UserUpdateOneRequiredWithoutCommentsInput
  content: String
  replies: CommentUpdateManyInput
  stickied: Boolean
}

input CommentUpdateInput {
  card: CardUpdateOneRequiredWithoutCommentsInput
  postedBy: UserUpdateOneRequiredWithoutCommentsInput
  content: String
  replies: CommentUpdateManyInput
  stickied: Boolean
}

input CommentUpdateManyDataInput {
  content: String
  stickied: Boolean
}

input CommentUpdateManyInput {
  create: [CommentCreateInput!]
  update: [CommentUpdateWithWhereUniqueNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueNestedInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyMutationInput {
  content: String
  stickied: Boolean
}

input CommentUpdateManyWithoutCardInput {
  create: [CommentCreateWithoutCardInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutCardInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutCardInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutPostedByInput {
  create: [CommentCreateWithoutPostedByInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutCardDataInput {
  postedBy: UserUpdateOneRequiredWithoutCommentsInput
  content: String
  replies: CommentUpdateManyInput
  stickied: Boolean
}

input CommentUpdateWithoutPostedByDataInput {
  card: CardUpdateOneRequiredWithoutCommentsInput
  content: String
  replies: CommentUpdateManyInput
  stickied: Boolean
}

input CommentUpdateWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateDataInput!
}

input CommentUpdateWithWhereUniqueWithoutCardInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutCardDataInput!
}

input CommentUpdateWithWhereUniqueWithoutPostedByInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostedByDataInput!
}

input CommentUpsertWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateDataInput!
  create: CommentCreateInput!
}

input CommentUpsertWithWhereUniqueWithoutCardInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutCardDataInput!
  create: CommentCreateWithoutCardInput!
}

input CommentUpsertWithWhereUniqueWithoutPostedByInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostedByDataInput!
  create: CommentCreateWithoutPostedByInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  card: CardWhereInput
  postedBy: UserWhereInput
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  replies_every: CommentWhereInput
  replies_some: CommentWhereInput
  replies_none: CommentWhereInput
  stickied: Boolean
  stickied_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type List {
  id: ID!
  board: Board!
  createdBy: User!
  name: String!
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card!]
  index: Int!
  createdAt: DateTime!
}

type ListConnection {
  pageInfo: PageInfo!
  edges: [ListEdge]!
  aggregate: AggregateList!
}

input ListCreateInput {
  id: ID
  board: BoardCreateOneWithoutListsInput!
  createdBy: UserCreateOneInput!
  name: String!
  cards: CardCreateManyWithoutListInput
  index: Int!
}

input ListCreateManyWithoutBoardInput {
  create: [ListCreateWithoutBoardInput!]
  connect: [ListWhereUniqueInput!]
}

input ListCreateOneWithoutCardsInput {
  create: ListCreateWithoutCardsInput
  connect: ListWhereUniqueInput
}

input ListCreateWithoutBoardInput {
  id: ID
  createdBy: UserCreateOneInput!
  name: String!
  cards: CardCreateManyWithoutListInput
  index: Int!
}

input ListCreateWithoutCardsInput {
  id: ID
  board: BoardCreateOneWithoutListsInput!
  createdBy: UserCreateOneInput!
  name: String!
  index: Int!
}

type ListEdge {
  node: List!
  cursor: String!
}

enum ListOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  index_ASC
  index_DESC
  createdAt_ASC
  createdAt_DESC
}

type ListPreviousValues {
  id: ID!
  name: String!
  index: Int!
  createdAt: DateTime!
}

input ListScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  index: Int
  index_not: Int
  index_in: [Int!]
  index_not_in: [Int!]
  index_lt: Int
  index_lte: Int
  index_gt: Int
  index_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ListScalarWhereInput!]
  OR: [ListScalarWhereInput!]
  NOT: [ListScalarWhereInput!]
}

type ListSubscriptionPayload {
  mutation: MutationType!
  node: List
  updatedFields: [String!]
  previousValues: ListPreviousValues
}

input ListSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ListWhereInput
  AND: [ListSubscriptionWhereInput!]
  OR: [ListSubscriptionWhereInput!]
  NOT: [ListSubscriptionWhereInput!]
}

input ListUpdateInput {
  board: BoardUpdateOneRequiredWithoutListsInput
  createdBy: UserUpdateOneRequiredInput
  name: String
  cards: CardUpdateManyWithoutListInput
  index: Int
}

input ListUpdateManyDataInput {
  name: String
  index: Int
}

input ListUpdateManyMutationInput {
  name: String
  index: Int
}

input ListUpdateManyWithoutBoardInput {
  create: [ListCreateWithoutBoardInput!]
  delete: [ListWhereUniqueInput!]
  connect: [ListWhereUniqueInput!]
  set: [ListWhereUniqueInput!]
  disconnect: [ListWhereUniqueInput!]
  update: [ListUpdateWithWhereUniqueWithoutBoardInput!]
  upsert: [ListUpsertWithWhereUniqueWithoutBoardInput!]
  deleteMany: [ListScalarWhereInput!]
  updateMany: [ListUpdateManyWithWhereNestedInput!]
}

input ListUpdateManyWithWhereNestedInput {
  where: ListScalarWhereInput!
  data: ListUpdateManyDataInput!
}

input ListUpdateOneRequiredWithoutCardsInput {
  create: ListCreateWithoutCardsInput
  update: ListUpdateWithoutCardsDataInput
  upsert: ListUpsertWithoutCardsInput
  connect: ListWhereUniqueInput
}

input ListUpdateWithoutBoardDataInput {
  createdBy: UserUpdateOneRequiredInput
  name: String
  cards: CardUpdateManyWithoutListInput
  index: Int
}

input ListUpdateWithoutCardsDataInput {
  board: BoardUpdateOneRequiredWithoutListsInput
  createdBy: UserUpdateOneRequiredInput
  name: String
  index: Int
}

input ListUpdateWithWhereUniqueWithoutBoardInput {
  where: ListWhereUniqueInput!
  data: ListUpdateWithoutBoardDataInput!
}

input ListUpsertWithoutCardsInput {
  update: ListUpdateWithoutCardsDataInput!
  create: ListCreateWithoutCardsInput!
}

input ListUpsertWithWhereUniqueWithoutBoardInput {
  where: ListWhereUniqueInput!
  update: ListUpdateWithoutBoardDataInput!
  create: ListCreateWithoutBoardInput!
}

input ListWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  board: BoardWhereInput
  createdBy: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  cards_every: CardWhereInput
  cards_some: CardWhereInput
  cards_none: CardWhereInput
  index: Int
  index_not: Int
  index_in: [Int!]
  index_not_in: [Int!]
  index_lt: Int
  index_lte: Int
  index_gt: Int
  index_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ListWhereInput!]
  OR: [ListWhereInput!]
  NOT: [ListWhereInput!]
}

input ListWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBoard(data: BoardCreateInput!): Board!
  updateBoard(data: BoardUpdateInput!, where: BoardWhereUniqueInput!): Board
  updateManyBoards(data: BoardUpdateManyMutationInput!, where: BoardWhereInput): BatchPayload!
  upsertBoard(where: BoardWhereUniqueInput!, create: BoardCreateInput!, update: BoardUpdateInput!): Board!
  deleteBoard(where: BoardWhereUniqueInput!): Board
  deleteManyBoards(where: BoardWhereInput): BatchPayload!
  createCard(data: CardCreateInput!): Card!
  updateCard(data: CardUpdateInput!, where: CardWhereUniqueInput!): Card
  updateManyCards(data: CardUpdateManyMutationInput!, where: CardWhereInput): BatchPayload!
  upsertCard(where: CardWhereUniqueInput!, create: CardCreateInput!, update: CardUpdateInput!): Card!
  deleteCard(where: CardWhereUniqueInput!): Card
  deleteManyCards(where: CardWhereInput): BatchPayload!
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createList(data: ListCreateInput!): List!
  updateList(data: ListUpdateInput!, where: ListWhereUniqueInput!): List
  updateManyLists(data: ListUpdateManyMutationInput!, where: ListWhereInput): BatchPayload!
  upsertList(where: ListWhereUniqueInput!, create: ListCreateInput!, update: ListUpdateInput!): List!
  deleteList(where: ListWhereUniqueInput!): List
  deleteManyLists(where: ListWhereInput): BatchPayload!
  createTeam(data: TeamCreateInput!): Team!
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  createTeamMembership(data: TeamMembershipCreateInput!): TeamMembership!
  updateTeamMembership(data: TeamMembershipUpdateInput!, where: TeamMembershipWhereUniqueInput!): TeamMembership
  updateManyTeamMemberships(data: TeamMembershipUpdateManyMutationInput!, where: TeamMembershipWhereInput): BatchPayload!
  upsertTeamMembership(where: TeamMembershipWhereUniqueInput!, create: TeamMembershipCreateInput!, update: TeamMembershipUpdateInput!): TeamMembership!
  deleteTeamMembership(where: TeamMembershipWhereUniqueInput!): TeamMembership
  deleteManyTeamMemberships(where: TeamMembershipWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  board(where: BoardWhereUniqueInput!): Board
  boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board]!
  boardsConnection(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BoardConnection!
  card(where: CardWhereUniqueInput!): Card
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card]!
  cardsConnection(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CardConnection!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  list(where: ListWhereUniqueInput!): List
  lists(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [List]!
  listsConnection(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ListConnection!
  team(where: TeamWhereUniqueInput!): Team
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  teamMembership(where: TeamMembershipWhereUniqueInput!): TeamMembership
  teamMemberships(where: TeamMembershipWhereInput, orderBy: TeamMembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamMembership]!
  teamMembershipsConnection(where: TeamMembershipWhereInput, orderBy: TeamMembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamMembershipConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Role {
  ADMIN
  USER
}

type Subscription {
  board(where: BoardSubscriptionWhereInput): BoardSubscriptionPayload
  card(where: CardSubscriptionWhereInput): CardSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  list(where: ListSubscriptionWhereInput): ListSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  teamMembership(where: TeamMembershipSubscriptionWhereInput): TeamMembershipSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Team {
  id: ID!
  owner: User!
  name: String!
  description: String
  members(where: TeamMembershipWhereInput, orderBy: TeamMembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamMembership!]
  boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board!]
  createdAt: DateTime!
}

type TeamConnection {
  pageInfo: PageInfo!
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  id: ID
  owner: UserCreateOneInput!
  name: String!
  description: String
  members: TeamMembershipCreateManyWithoutTeamInput
  boards: BoardCreateManyInput
}

input TeamCreateOneWithoutMembersInput {
  create: TeamCreateWithoutMembersInput
  connect: TeamWhereUniqueInput
}

input TeamCreateWithoutMembersInput {
  id: ID
  owner: UserCreateOneInput!
  name: String!
  description: String
  boards: BoardCreateManyInput
}

type TeamEdge {
  node: Team!
  cursor: String!
}

type TeamMembership {
  id: ID!
  user: User!
  team: Team!
  role: TeamRole!
  createdAt: DateTime!
}

type TeamMembershipConnection {
  pageInfo: PageInfo!
  edges: [TeamMembershipEdge]!
  aggregate: AggregateTeamMembership!
}

input TeamMembershipCreateInput {
  id: ID
  user: UserCreateOneWithoutTeamsInput!
  team: TeamCreateOneWithoutMembersInput!
  role: TeamRole
}

input TeamMembershipCreateManyWithoutTeamInput {
  create: [TeamMembershipCreateWithoutTeamInput!]
  connect: [TeamMembershipWhereUniqueInput!]
}

input TeamMembershipCreateManyWithoutUserInput {
  create: [TeamMembershipCreateWithoutUserInput!]
  connect: [TeamMembershipWhereUniqueInput!]
}

input TeamMembershipCreateWithoutTeamInput {
  id: ID
  user: UserCreateOneWithoutTeamsInput!
  role: TeamRole
}

input TeamMembershipCreateWithoutUserInput {
  id: ID
  team: TeamCreateOneWithoutMembersInput!
  role: TeamRole
}

type TeamMembershipEdge {
  node: TeamMembership!
  cursor: String!
}

enum TeamMembershipOrderByInput {
  id_ASC
  id_DESC
  role_ASC
  role_DESC
  createdAt_ASC
  createdAt_DESC
}

type TeamMembershipPreviousValues {
  id: ID!
  role: TeamRole!
  createdAt: DateTime!
}

input TeamMembershipScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  role: TeamRole
  role_not: TeamRole
  role_in: [TeamRole!]
  role_not_in: [TeamRole!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [TeamMembershipScalarWhereInput!]
  OR: [TeamMembershipScalarWhereInput!]
  NOT: [TeamMembershipScalarWhereInput!]
}

type TeamMembershipSubscriptionPayload {
  mutation: MutationType!
  node: TeamMembership
  updatedFields: [String!]
  previousValues: TeamMembershipPreviousValues
}

input TeamMembershipSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TeamMembershipWhereInput
  AND: [TeamMembershipSubscriptionWhereInput!]
  OR: [TeamMembershipSubscriptionWhereInput!]
  NOT: [TeamMembershipSubscriptionWhereInput!]
}

input TeamMembershipUpdateInput {
  user: UserUpdateOneRequiredWithoutTeamsInput
  team: TeamUpdateOneRequiredWithoutMembersInput
  role: TeamRole
}

input TeamMembershipUpdateManyDataInput {
  role: TeamRole
}

input TeamMembershipUpdateManyMutationInput {
  role: TeamRole
}

input TeamMembershipUpdateManyWithoutTeamInput {
  create: [TeamMembershipCreateWithoutTeamInput!]
  delete: [TeamMembershipWhereUniqueInput!]
  connect: [TeamMembershipWhereUniqueInput!]
  set: [TeamMembershipWhereUniqueInput!]
  disconnect: [TeamMembershipWhereUniqueInput!]
  update: [TeamMembershipUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [TeamMembershipUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [TeamMembershipScalarWhereInput!]
  updateMany: [TeamMembershipUpdateManyWithWhereNestedInput!]
}

input TeamMembershipUpdateManyWithoutUserInput {
  create: [TeamMembershipCreateWithoutUserInput!]
  delete: [TeamMembershipWhereUniqueInput!]
  connect: [TeamMembershipWhereUniqueInput!]
  set: [TeamMembershipWhereUniqueInput!]
  disconnect: [TeamMembershipWhereUniqueInput!]
  update: [TeamMembershipUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TeamMembershipUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TeamMembershipScalarWhereInput!]
  updateMany: [TeamMembershipUpdateManyWithWhereNestedInput!]
}

input TeamMembershipUpdateManyWithWhereNestedInput {
  where: TeamMembershipScalarWhereInput!
  data: TeamMembershipUpdateManyDataInput!
}

input TeamMembershipUpdateWithoutTeamDataInput {
  user: UserUpdateOneRequiredWithoutTeamsInput
  role: TeamRole
}

input TeamMembershipUpdateWithoutUserDataInput {
  team: TeamUpdateOneRequiredWithoutMembersInput
  role: TeamRole
}

input TeamMembershipUpdateWithWhereUniqueWithoutTeamInput {
  where: TeamMembershipWhereUniqueInput!
  data: TeamMembershipUpdateWithoutTeamDataInput!
}

input TeamMembershipUpdateWithWhereUniqueWithoutUserInput {
  where: TeamMembershipWhereUniqueInput!
  data: TeamMembershipUpdateWithoutUserDataInput!
}

input TeamMembershipUpsertWithWhereUniqueWithoutTeamInput {
  where: TeamMembershipWhereUniqueInput!
  update: TeamMembershipUpdateWithoutTeamDataInput!
  create: TeamMembershipCreateWithoutTeamInput!
}

input TeamMembershipUpsertWithWhereUniqueWithoutUserInput {
  where: TeamMembershipWhereUniqueInput!
  update: TeamMembershipUpdateWithoutUserDataInput!
  create: TeamMembershipCreateWithoutUserInput!
}

input TeamMembershipWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  team: TeamWhereInput
  role: TeamRole
  role_not: TeamRole
  role_in: [TeamRole!]
  role_not_in: [TeamRole!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [TeamMembershipWhereInput!]
  OR: [TeamMembershipWhereInput!]
  NOT: [TeamMembershipWhereInput!]
}

input TeamMembershipWhereUniqueInput {
  id: ID
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
}

type TeamPreviousValues {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
}

enum TeamRole {
  ADMIN
  MEMBER
  VIEWER
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
  AND: [TeamSubscriptionWhereInput!]
  OR: [TeamSubscriptionWhereInput!]
  NOT: [TeamSubscriptionWhereInput!]
}

input TeamUpdateInput {
  owner: UserUpdateOneRequiredInput
  name: String
  description: String
  members: TeamMembershipUpdateManyWithoutTeamInput
  boards: BoardUpdateManyInput
}

input TeamUpdateManyMutationInput {
  name: String
  description: String
}

input TeamUpdateOneRequiredWithoutMembersInput {
  create: TeamCreateWithoutMembersInput
  update: TeamUpdateWithoutMembersDataInput
  upsert: TeamUpsertWithoutMembersInput
  connect: TeamWhereUniqueInput
}

input TeamUpdateWithoutMembersDataInput {
  owner: UserUpdateOneRequiredInput
  name: String
  description: String
  boards: BoardUpdateManyInput
}

input TeamUpsertWithoutMembersInput {
  update: TeamUpdateWithoutMembersDataInput!
  create: TeamCreateWithoutMembersInput!
}

input TeamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  owner: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  members_every: TeamMembershipWhereInput
  members_some: TeamMembershipWhereInput
  members_none: TeamMembershipWhereInput
  boards_every: BoardWhereInput
  boards_some: BoardWhereInput
  boards_none: BoardWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
}

input TeamWhereUniqueInput {
  id: ID
  name: String
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board!]
  invited(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  teams(where: TeamMembershipWhereInput, orderBy: TeamMembershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamMembership!]
  role: Role!
  attempts: Int!
  lastFailed: DateTime
  createdAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  boards: BoardCreateManyWithoutOwnerInput
  invited: BoardCreateManyWithoutMembersInput
  comments: CommentCreateManyWithoutPostedByInput
  teams: TeamMembershipCreateManyWithoutUserInput
  role: Role
  attempts: Int
  lastFailed: DateTime
}

input UserCreateManyWithoutInvitedInput {
  create: [UserCreateWithoutInvitedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutBoardsInput {
  create: UserCreateWithoutBoardsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTeamsInput {
  create: UserCreateWithoutTeamsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBoardsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  invited: BoardCreateManyWithoutMembersInput
  comments: CommentCreateManyWithoutPostedByInput
  teams: TeamMembershipCreateManyWithoutUserInput
  role: Role
  attempts: Int
  lastFailed: DateTime
}

input UserCreateWithoutCommentsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  boards: BoardCreateManyWithoutOwnerInput
  invited: BoardCreateManyWithoutMembersInput
  teams: TeamMembershipCreateManyWithoutUserInput
  role: Role
  attempts: Int
  lastFailed: DateTime
}

input UserCreateWithoutInvitedInput {
  id: ID
  name: String!
  email: String!
  password: String!
  boards: BoardCreateManyWithoutOwnerInput
  comments: CommentCreateManyWithoutPostedByInput
  teams: TeamMembershipCreateManyWithoutUserInput
  role: Role
  attempts: Int
  lastFailed: DateTime
}

input UserCreateWithoutTeamsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  boards: BoardCreateManyWithoutOwnerInput
  invited: BoardCreateManyWithoutMembersInput
  comments: CommentCreateManyWithoutPostedByInput
  role: Role
  attempts: Int
  lastFailed: DateTime
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  attempts_ASC
  attempts_DESC
  lastFailed_ASC
  lastFailed_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  role: Role!
  attempts: Int!
  lastFailed: DateTime
  createdAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  lastFailed: DateTime
  lastFailed_not: DateTime
  lastFailed_in: [DateTime!]
  lastFailed_not_in: [DateTime!]
  lastFailed_lt: DateTime
  lastFailed_lte: DateTime
  lastFailed_gt: DateTime
  lastFailed_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  boards: BoardUpdateManyWithoutOwnerInput
  invited: BoardUpdateManyWithoutMembersInput
  comments: CommentUpdateManyWithoutPostedByInput
  teams: TeamMembershipUpdateManyWithoutUserInput
  role: Role
  attempts: Int
  lastFailed: DateTime
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  boards: BoardUpdateManyWithoutOwnerInput
  invited: BoardUpdateManyWithoutMembersInput
  comments: CommentUpdateManyWithoutPostedByInput
  teams: TeamMembershipUpdateManyWithoutUserInput
  role: Role
  attempts: Int
  lastFailed: DateTime
}

input UserUpdateManyDataInput {
  name: String
  email: String
  password: String
  role: Role
  attempts: Int
  lastFailed: DateTime
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  role: Role
  attempts: Int
  lastFailed: DateTime
}

input UserUpdateManyWithoutInvitedInput {
  create: [UserCreateWithoutInvitedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutInvitedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutInvitedInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutBoardsInput {
  create: UserCreateWithoutBoardsInput
  update: UserUpdateWithoutBoardsDataInput
  upsert: UserUpsertWithoutBoardsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTeamsInput {
  create: UserCreateWithoutTeamsInput
  update: UserUpdateWithoutTeamsDataInput
  upsert: UserUpsertWithoutTeamsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutBoardsDataInput {
  name: String
  email: String
  password: String
  invited: BoardUpdateManyWithoutMembersInput
  comments: CommentUpdateManyWithoutPostedByInput
  teams: TeamMembershipUpdateManyWithoutUserInput
  role: Role
  attempts: Int
  lastFailed: DateTime
}

input UserUpdateWithoutCommentsDataInput {
  name: String
  email: String
  password: String
  boards: BoardUpdateManyWithoutOwnerInput
  invited: BoardUpdateManyWithoutMembersInput
  teams: TeamMembershipUpdateManyWithoutUserInput
  role: Role
  attempts: Int
  lastFailed: DateTime
}

input UserUpdateWithoutInvitedDataInput {
  name: String
  email: String
  password: String
  boards: BoardUpdateManyWithoutOwnerInput
  comments: CommentUpdateManyWithoutPostedByInput
  teams: TeamMembershipUpdateManyWithoutUserInput
  role: Role
  attempts: Int
  lastFailed: DateTime
}

input UserUpdateWithoutTeamsDataInput {
  name: String
  email: String
  password: String
  boards: BoardUpdateManyWithoutOwnerInput
  invited: BoardUpdateManyWithoutMembersInput
  comments: CommentUpdateManyWithoutPostedByInput
  role: Role
  attempts: Int
  lastFailed: DateTime
}

input UserUpdateWithWhereUniqueWithoutInvitedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutInvitedDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutBoardsInput {
  update: UserUpdateWithoutBoardsDataInput!
  create: UserCreateWithoutBoardsInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutTeamsInput {
  update: UserUpdateWithoutTeamsDataInput!
  create: UserCreateWithoutTeamsInput!
}

input UserUpsertWithWhereUniqueWithoutInvitedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutInvitedDataInput!
  create: UserCreateWithoutInvitedInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  boards_every: BoardWhereInput
  boards_some: BoardWhereInput
  boards_none: BoardWhereInput
  invited_every: BoardWhereInput
  invited_some: BoardWhereInput
  invited_none: BoardWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  teams_every: TeamMembershipWhereInput
  teams_some: TeamMembershipWhereInput
  teams_none: TeamMembershipWhereInput
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  lastFailed: DateTime
  lastFailed_not: DateTime
  lastFailed_in: [DateTime!]
  lastFailed_not_in: [DateTime!]
  lastFailed_lt: DateTime
  lastFailed_lte: DateTime
  lastFailed_gt: DateTime
  lastFailed_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  name: String
  email: String
}

enum Visibility {
  PRIVATE
  PUBLIC
  TEAM
}
`
      }
    