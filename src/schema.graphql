scalar DateTime

type Query {
	info: String!
  getBoards: UserBoards!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  createBoard(name: String!): Board
  createList(boardId: ID!, name: String!): List
  createCard(listId: ID!, title: String!): Card
  postComment(cardId: ID!, content: String!): Comment
  postReply(commentId: ID!, content: String!): Comment
}

type Subscription {
	newList: List
	newCard: Card
  newComment: Comment
}

type User {
	id: ID!
	email: String!
	name: String!
	boards: [Board!]!
	invited: [Board!]!
  comments: [Comment!]!
	teams: [TeamMembership!]!
  role: Role!
	createdAt: DateTime!	
}

type Team {
	id: ID! 
	owner: User!
	name: String!
  description: String
  members: [TeamMembership!]!
	boards: [Board!]!
	createdAt: DateTime!
}

type TeamMembership {
	id: ID!
	user: User!
	team: Team!
	role: TeamRole!
	createdAt: DateTime!
}

type Board {
	id: ID!
	owner: User!
	name: String!
  description: String
	members: [User!]!
	lists: [List!]!
	visibility: Visibility!
	createdAt: DateTime!
	updatedAt: DateTime!
}

type List {
	id: ID!
	board: Board!
  createdBy: User!
	name: String!
	cards: [Card!]!
  index: Int!
	createdAt: DateTime!
}

type Card {
	id: ID!
	list: List!
  createdBy: User!
	title: String!
	description: String!
	comments: [Comment!]!
  index: Int!
	createdAt: DateTime!
	updatedAt: DateTime!
}

type Comment {
	id: ID!
	card: Card!
	postedBy: User!
	content: String!
  top: Comment
  replies: [Comment!]!
  stickied: Boolean!
	createdAt: DateTime!
	updatedAt: DateTime!
}

type AuthPayload {
	token: String
	user: User
}

enum Role {
	ADMIN
	USER
}

enum TeamRole {
	ADMIN
	MEMBER
	VIEWER
}

enum Visibility {
	PRIVATE
	PUBLIC
	TEAM
}

enum ListOrder {
	name_ASC
	name_DESC
	createdAt_ASC
	createdAt_DESC
}

type UserBoards {
  boards: [Board!]!
  invited: [Board!]!
}