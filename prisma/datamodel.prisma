type User {
  id: ID! @id
  name: String! @unique
  email: String! @unique
  password: String!
  boards: [Board!]! @relation(name: "OwnedBoards")
  invited: [Board!]! @relation(name: "InvitedBoards")
  comments: [Comment!]! 
	teams: [TeamMembership!]!
  role: Role! @default(value: USER)
  attempts: Int! @default(value: 0)
  lastLogin: DateTime
	createdAt: DateTime! @createdAt
}

type Team {
	id: ID! @id
	owner: User!
	name: String! @unique
  description: String
  members: [TeamMembership!]!
	boards: [Board!]!
	createdAt: DateTime! @createdAt
}

type TeamMembership {
	id: ID! @id
	user: User!
	team: Team!
	role: TeamRole! @default(value: MEMBER)
	createdAt: DateTime! @createdAt
}

type Board {
  id: ID! @id
  owner: User! @relation(name: "OwnedBoards")
  name: String!
  description: String
	members: [User!]! @relation(name: "InvitedBoards")
	lists: [List!]!
	visibility: Visibility! @default(value: PRIVATE)
	createdAt: DateTime! @createdAt
	updatedAt: DateTime! @updatedAt
}

type List {
	id: ID! @id
	board: Board!
  createdBy: User!
	name: String!
	cards: [Card!]!
  index: Int!
	createdAt: DateTime! @createdAt
}

type Card {
	id: ID! @id
	list: List!
  createdBy: User!
	title: String!
	description: String
	comments: [Comment!]!
  index: Int!
	createdAt: DateTime! @createdAt
	updatedAt: DateTime! @updatedAt
}

type Comment {
	id: ID! @id
	card: Card!
	postedBy: User!
	content: String!
  top: Comment @relation(name: "Replies")
  replies: [Comment!]! @relation(name: "Replies")
  stickied: Boolean! @default(value: false)
	createdAt: DateTime! @createdAt
	updatedAt: DateTime! @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum TeamRole {
	ADMIN
	MEMBER
	VIEWER
}

enum Visibility {
	PRIVATE
	PUBLIC
	TEAM
}
